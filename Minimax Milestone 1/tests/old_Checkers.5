--1.)What if the GetAllMoves jump DFS can branch off in two different directions?undoLastMove 1000doMove C7 -> D6doMove F2 -> E3doMove C3 -> D2doMove E3 -> D4doMove C5 -> E3doMove F6 -> E5doMove B6 -> C5doMove E5 -> C7doMove B8 -> D6doMove G5 -> F6doMove E3 -> G5doMove H6 -> F4doMove D6 -> E5doMove F6 -> D4 -> B6doMove A7 -> C5doMove F8 -> E7doMove A5 -> B6doMove G7 -> F6doMove B2 -> C3doMove H4 -> G5doMove D2 -> E3doMove F4 -> D2doMove C3 -> E1doMove E7 -> D8doMove E1 -> F2doMove G1 -> E3doMove A1 -> B2doMove E3 -> D2doMove C1 -> E3doMove D8 -> C7doMove B6 -> D8doMove F6 -> E5doMove E3 -> F2doMove G3 -> E1doMove B2 -> C1doMove G5 -> F6doMove D8 -> E7doMove F6 -> D8doMove A3 -> B2doMove H2 -> G3doMove C1 -> D2showBoarddoMove e1  			-> c3   -> a1showBoarddoMove e1	->c3    	  		  -> a1-- Right here is a broken case for my code, where I show a White move during Black's turn.-- Also, I'm allowing a black piece to move backwards AND forwards.  That doesn't make sense.showBoardundoLastMove 1doMove e1	->c3    	  		  -> a1		  		showBoardundoLastMove 1000-- Various old tests from CheckersTests.minimaxenterMove C3  ->   D4applyMovedoMove f4->e5doMove c7->d8doMove e5->c3doMove b4->d2doMove f2->e1doMove b2->c3doMove f6->e5doMove a1->b2doMove g3->f4doMove c3->d4showBoardsetOptionsnsetOptionsy50040020setOptionsn--2.) Invalid string input checks-- Out of bounds stringsenterMove a1->b0enterMove b8->c9enterMove h2->i1-- Decimals for numbersenterMove a1.1->b4enterMove a1->b2.2-- Extra 0'senterMove a000000000000->b4enterMove a3->b0000000000-- Trailing garbageenterMove a3->b4 garbageenterMove a3->b4garbageenterMove a3->b4 					  			   /0-- Spaces inside arrowsenterMove a3- >b4--3.) Check a move where you jump into a backrow and then attempt to jump backwards as a king.undoLastMove 1000testPlay 10 25doMove h8->g7doMove a3->b4showBoarddoMove c1->a3showBoardundoLastMove 1000--4.) compareMove test:  What if you have two moves that have different lengths, but are otherwise equal to each other?enterMove a1->b2->c3compareMove a1->b2->c3->d4enterMove a1->b2->c3->d4compareMove a1->b2->c3-- compareMove needs 100% test coverage.enterMove a3->b4->c5compareMove a3->b3->c5compareMove a3->b4->c5compareMove a3->b5->c5compareMove a3->b4->c5->c5compareMove a3->b4compareMove a3->b3->c5->compareMove a3->b3->c5- >compareMove a3->b3->c5->->-- setOptions test:  Ensure that changing the options immediately changes the board values.undoLastMove 1000testPlay 34 20showBoardshowValsetOptionsnshowValsetOptionsy504020showValtestPlay 23 20showValundoLastMove 30showValsetOptionsy204050showValsetOptionsn-- setOptions test:  Saving the board should load up those options.undoLastMove 1000testPlay 58 29showValsaveBoard test0showValsetOptionsy1009080showValtestPlay 5 10showValsetOptionsy403040showValloadBoard test0showValsetOptionsy403040showVal-- Test showMoveHist:  Loading the board should load a new moveHist.undoLastMove 1000showMoveHisttestPlay 34 1showMoveHisttestPlay 23 10showMoveHistsaveBoard test1showMoveHistundoLastMove 1000showMoveHisttestPlay 50 20showMoveHistloadBoard test1showMoveHistshowBoard-- Ensure that upper case and lower case string input are both valid.enterMove a1->B2enterMove A1->b2enterMove a1->b2-- Verify that tabs in strings aren't invalid strings.enterMove a1 		-> b2enterMove A1->B2      		   	->c3-- END GAME tests-- Check an 8 or 9 jump move-- "setOptions is a gold mine for bugs"-- compareKeys testsquit
