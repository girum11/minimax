-- 1.) A player with no moves must make a "Pass" move (and we permit Pass only in that case).
doMove Pass
testPlay 7 50
doMove Pass
doMove [0,6]
doMove [7,7]
doMove [6,5]
doMove [0,5]
doMove Pass
doMove [6,7]
doMove [7,5]
doMove Pass
doMove [0,4]
doMove Pass
doMove [5,7]
doMove [5,6]
doMove Pass
doMove [7,6]
doMove Pass
doMove Pass
doMove Pass
undoLastMove 1000

-- 2.) We end the game when both players have just made Pass moves (this game taken from math email online).
doMove [5,4]
doMove [3,5]
doMove [2,4]
doMove [5,5]
doMove [4,6]
doMove Pass
doMove Pass
doMove [5,3]
doMove Pass
doMove Pass
doMove [6,4]
doMove Pass
doMove Pass
doMove [4,5]
doMove Pass
doMove Pass
doMove [4,2]

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove Pass

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove Pass

showBoard
showMove
showVal
showMoveHist
keyMoveCount

undoLastMove 1000

-- 3.) You may not skip over your own color disc to outflank an opposing disc.  Discs may only be outflanked as a direct result of a move and must afll in the direct line of the disc placed down.
testPlay 15 30
doMove [5,4]

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove [3,7]

showBoard
showMove
showVal
showMoveHist
keyMoveCount

undoLastMove 1

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove [3,1]

showBoard
showMove
showVal
showMoveHist
keyMoveCount

undoLastMove 100

-- 4.) When it is no longer possble for either player to move, the game is over.  Discs are counted and the player with the majority of his or her color discs on the board is the winner.
testPlay 15 50

showBoard
showMove
showVal
showMoveHist
keyMoveCount

testPlay 18 5

showBoard
showMove
showVal
showMoveHist
keyMoveCount

testPlay 20 5

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove Pass

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove Pass

showBoard
showMove
showVal
showMoveHist
keyMoveCount

doMove Pass

showBoard
showMove
showVal
showMoveHist
keyMoveCount
undoLastMove 100

--5.) A disc may outflank any number of discs in one or more rows in any number of directions at the same time: What if the piece that you're trying to outflank is outside of the board's range?
doMove [5,4]
doMove [5,3]
doMove [6,2]
doMove [6,3]
doMove [3,2]
doMove [7,1]
doMove [8,0]

showBoard
showMove
showVal
showMoveHist
keyMoveCount

undoLastMove 40

-- 6a.) A *badly formed* move is one that disobeys string formats, or that has obvious errors such as out-of-range number values.  The operator=(const std::string &) method detects badly formed moevs and throws an exception when it is passed one.
doMove someRandomBadInputString
doMove [7,8]
doMove [8,7]
doMove [23049238047239847239847, 2]
doMove [2, 239084289034729384723984723]
doMove [2384723984729384723984, 29348723984729384723]
doMove [-1, 1]
doMove [1, -1]
doMove [2.2, 3]
doMove [2, 3.3]
doMove [,]
doMove [3,]
doMove [,3]
doMove pass
doMove pAss
domove [2,3]
doMove (2,3]
doMove [2,3)
doMove (2,3)
doMove {2,3]
doMove [2,3}
doMove {2,3}
doMove[2,3]
-- 6b.) The [1,2] permits spaces anywhere
doMove 		     [ 	    2   			  ,  		   3   		  ] 
undoLastMove 1    
doMove [2,
3]
doMove [2,@]
doMove Pass

testPlay 19 30
undoLastMove 30

-- 7.) The operator=(string) method for all games must check for incorrect format including garbage after the end of the move, and for out-of-bounds numerical values.
-- (out-of-bounds move testing has been done in the test case above)
doMove [2,3]
undoLastMove 1
doMove [2,3] asdfasdfasdf
doMove [2,3]asdf
doMove [2,3] doMove [2,2]
undoLastMove 20
doMove [2,3]doMove [2,2]
undoLastMove 20

-- 8.) Verify that a move is one of those returned by GetAllMoves
doMove [2,3]
testPlay 50 50
showBoard
doMove [0,0]
doMove Pass
doMove [2,5]
doMove [5,7]
showBoard
testPlay 30 50

showBoard
showMove
showVal
showMoveHist
keyMoveCount
undoLastMove 200

-- 9.)  Tests will certainly include moves with various invalid formats and with squares or bowls that are out fo bounds, to fully test your operator=.

**** See Test 6 ***

-- 10.) If a badly formatted Move string is presented to the operator= method, the method throws a BaseException with one fo the contents below where X is the name of the game, and M is the full move string.  If this happens, the method does not modify the move at all.  In other words, it either modifies the move, or throws an exception indicating a bad move string, but not both.

undoLastMove 100
showMove
doMove [2,3]
showMove
doMove[2,2]
showMove


quit

-- What if I try to continue the game after "quit"?
undoLastMove 1000
testPlay 7 20

